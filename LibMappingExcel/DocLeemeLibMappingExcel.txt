




*******************LIBRERIAS REQUERIDAS****************************
*******************LIBRERIAS REQUERIDAS****************************
*******************LIBRERIAS REQUERIDAS****************************
		
		*	GemBox.Spreadsheet
		*	Infraestructure
		*	System.Windows.Interactivity
		*	LibMappingExcel

*******************************************************************



***************************INSTANCIA MappingExcel*******************************
***************************INSTANCIA MappingExcel*******************************
***************************INSTANCIA MappingExcel*******************************
	
		* T == Objeto creado
	
	using LibMappingExcel.ViewModels;
    using LibMappingExcel.Models;

	MappingExcel<T> mappingExcel = new MappingExcel<T>("Nombre proyecto", Entorno.Conexion);

*******************************************************************	
	


******************MANTEMINIENTO A PLANTILLAS**********************
******************MANTEMINIENTO A PLANTILLAS**********************
******************MANTEMINIENTO A PLANTILLAS**********************
		
		* Este codigo abrira una ventana de dialogo en donde se podran realizar las operaciones de 
				Alta
				Modifica
				Elimina
	
    mappingExcel.AlterMappingExcel();

*******************************************************************





***********************OBTENER PLANTILLAS**************************
***********************OBTENER PLANTILLAS**************************
***********************OBTENER PLANTILLAS**************************
	
	* la ObservableCollection de plantillas es de tipo PlantillasExcel dentro de este estan el id y la descripcion de la plantilla
		* este id es el que se necesitara para descargar la plantilla

    ObservableCollection<PlantillasExcel> plantillas = (ObservableCollection<PlantillasExcel>)mappingExcel.GetPlantillas().Result;

*******************************************************************




***********************DESCARGAR PLANTILLA******************************
***********************DESCARGAR PLANTILLA******************************
***********************DESCARGAR PLANTILLA******************************


		SaveFileDialog saveFileDialog = new SaveFileDialog();
        saveFileDialog.InitialDirectory = @"C:\";
        saveFileDialog.Title = "GUARDAR ARCHIVO";
        saveFileDialog.CheckPathExists = true;
        saveFileDialog.RestoreDirectory = true;
        saveFileDialog.DefaultExt = "xlsx";
        saveFileDialog.Filter = "EXCEL | *.xlsx";
        if (saveFileDialog.ShowDialog() == false) { return; }
        string rutaGuardar = saveFileDialog.FileName;

        Response response = mappingExcel.DownloadExcel(rutaGuardar, this.PlantillaSelected.Id);
		if (!response.IsSuccess)
		{
		    MessageBox.Show(response.Message);
		}

*******************************************************************




****************************CARGAR EXCEL************************************
****************************CARGAR EXCEL************************************
****************************CARGAR EXCEL************************************
			

			OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.FileName = "Selecciona Archivo";
            openFileDialog.DefaultExt = "xlsx";
            openFileDialog.Filter = "Forward | *.xlsx";
            if (openFileDialog.ShowDialog() == false) { return; }
            string rutaArchivo = openFileDialog.FileName;

            //Response == Tiene la respopuesta de la libreria 
            Response response = mappingExcel.LoadExcel(rutaArchivo, "id de la plantilla seleccionada");
            //se valida que la repuesta sea true en case de no ser asi se muestra el error
            if (!response.IsSuccess)
            {
                MessageBox.Show(response.Message,"Error",MessageBoxButton.OK, MessageBoxImage.Error); 
                return;
            }

            //LoadExcelResp tiene 2 propiedades
            //ListObjectT == es la ObservableCollection<T> del objeto enviado al instanciar MappingExcel datos correctos
            //ListObjectTError == es la ObservableCollection<T> del objeto enviado al instanciar MappingExcel pero aqui estan los datos con error 

            LoadExcelResp<T> LoadExcelResp = (LoadExcelResp<T>)response.Result;
            ObservableCollection<T> plantillaExcel = LoadExcelResp.ListObjectT;
            ObservableCollection<T> plantillaExcelError = LoadExcelResp.ListObjectTError;

*******************************************************************




**********************ATRIBUTOS OPCIONALES PARA EL OBJETO T **************************
**********************ATRIBUTOS OPCIONALES PARA EL OBJETO T **************************
**********************ATRIBUTOS OPCIONALES PARA EL OBJETO T **************************

		* T == Objeto generico que resibe el constructor de mappingExcel	
		* este objeto podra tener atributos opcionales que leera la libreria LibMappingExcel

		*********ejemplo********

		se requiere migrar un excel que tenga 
			* Contrato
			* Nombre
			* Titulos
			* De Compra o de Venta

		el objeto seria 
			
		public class EjemploMigrar
		{
		    public string Contrato { get; set; }
		    public string Nombre { get; set; }
		    public int Titulos { get; set; }
		    public string CompraVenta { get; set; }
		}


		la libreria al hacer el match entre excel y este objeto
			*	cualquier cosa que sea un string lo colocara en Contrato
			*	cualquier cosa que sea un string lo colocara en Nombre
			*	En titulos solo numeros Enteros
			*	cualquier cosa que sea un string lo colocara en CompraVenta


		public class EjemploMigrar
		{
		    [RegularExpressionMappingExcel(RegularExpression = @"\A[0-9]{8}\Z", Message = "8 caranteres \rNumericos", Example = "08888045")]
		    public string Contrato { get; set; }

		    [RegularExpressionMappingExcel(RegularExpression = @"\A[a-zA-Z0-9]{1,40}\Z", Message = "Cadena de \r1 a 40 caracteres", Example = "NOMBRE")]
		    public string Nombre { get; set; }

		    [RegularExpressionMappingExcel(RegularExpression = @"\A[0-9]+\Z", Message = "Valor numerico \rsin decimales", Example = "1000")]
		    public int Titulos { get; set; }

		    [RegularExpressionMappingExcel(Constans = "C|V", Message = "C = Compra \rV = Venta", Example = "C")]
		    public decimal CompraVenta { get; set; }

		    
			[RegularExpressionMappingExcel(IsVisible = false)]
		    public string MessageLibMappingExcel { get; set; }
			[RegularExpressionMappingExcel(IsVisible = false)]
		    public int RowLibMappingExcel { get; set; }
		}


		* Al hacer uso del atributo RegularExpressionMappingExcel se podra definir ciertas condiciones. El atributo cuneta con 5 propiedades
			
			*	RegularExpression	==	representa una exprecion regular que debera cumplirse al migrar el excel
			*	Constans			==	se podran definir constantes
			*	InputFormatDate		==	formato de entrada para fechas
            *	OutputFormatDate	==	formato de salida para fechas
			*	Message				==	Mensaje que se le mostrara al usuario como ayuda para migrar el excel
			*	Example				==	Cuando se descarge una plantilla esta tendra un ejemplo del dato que puede ser colocado por el usuario
			*	IsVisible			==	En falso no se lo muestra al usuario para pedirle una datos en esta propiedad
			*	AliasProperty		==	Asigna un alias a la propiedad
			*	Default				==	Para asignar un valor por default a la propiedad cuando el obtenido en excel no sea correcto
			

			//los 5 son opcionales

			en este ejemplo en la propiedad Contrato ya no se acentara cuarquier cadena, solo se aceptaran las que cumplan con la exprecion regular 


		LA PROPIEDAD RowLibMappingExcel opcionalmente se podra colocar en el objeto
			*	Tendra el numero renglon del excel
		LA PROPIEDAD MessageLibMappingExcel opcionalmente se podra colocar en el objeto
			* En caso de que no se cumplan con las condiciones definadas aqui se mostrara el mensaje del error
			* los registros que no cumplan con las condiciones definidas estaran en LoadExcelResp.ListObjectTError
			* los registros que si cumplan con las condiciones estaran en LoadExcelResp.ListObjectT y en MessageLibMappingExcel tendran el renglo del que se tomo del excel








